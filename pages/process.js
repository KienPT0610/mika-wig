import Header from '../components/Header'
import Footer from '../components/Footer'
import { useState } from 'react'

const processSteps = [
  {
    title: 'Ch·ªçn l·ªçc nguy√™n li·ªáu',
    description: `To√†n b·ªô s·∫£n ph·∫©m ƒë∆∞·ª£c l√†m t·ª´ t√≥c th·∫≠t ƒë√£ qua ch·ªçn l·ªçc k·ªπ c√†ng, ƒë·∫£m b·∫£o ƒë·ªô ch·∫Øc kh·ªèe, b√≥ng m∆∞·ª£t v√† b·ªÅn m√†u theo th·ªùi gian. 
M·ªói s·ª£i t√≥c ƒë·ªÅu c√≥ kh·∫£ nƒÉng ch·ªãu ƒë∆∞·ª£c c√°c t√°c ƒë·ªông c·ªßa h√≥a ch·∫•t nhu·ªôm, t·∫©y v√† t·∫°o ki·ªÉu, mang l·∫°i ƒë·ªô b·ªÅn v∆∞·ª£t tr·ªôi.`
  },
  {
    title: 'Ch·∫•t li·ªáu v√† ph·ª• ki·ªán cao c·∫•p',
    description: `ƒê·∫£m b·∫£o ƒë·ªô b·ªÅn v√† c·∫£m gi√°c t·ª± nhi√™n khi s·ª≠ d·ª•ng:`,
    list: [
      'L∆∞·ªõi t√≥c: lo·∫°i cao c·∫•p, tho√°ng kh√≠ v√† √™m √°i.',
      'K·∫πp t√≥c: k·∫πp c√≥ ƒë·ªám silicon, c·ªë ƒë·ªãnh ch·∫Øc ch·∫Øn m√† kh√¥ng g√¢y ƒëau.',
      'S·ª£i ch·ªâ: may b·∫±ng ch·ªâ chuy√™n d·ª•ng, ƒë·∫£m b·∫£o ƒë·ªô b·ªÅn v√† t√≠nh th·∫©m m·ªπ.'
    ]
  },
  {
    title: 'Gia c√¥ng & m√≥c t√≥c',
    description: `Sau khi kh√°ch h√†ng x√°c nh·∫≠n m·∫´u v√† k√≠ch th∆∞·ªõc, Mika.wig s·∫Ω m√≥c t√≥c th·ªß c√¥ng theo th√¥ng s·ªë ri√™ng. 
B·ªô khu√¥n t√≥c ƒë∆∞·ª£c t·∫°o d·ª±a tr√™n s·ªë ƒëo ƒë·∫ßu, gi√∫p m√°i t√≥c gi·∫£ √¥m s√°t, t·ª± nhi√™n v√† tho·∫£i m√°i.`
  },
  {
    title: 'Nhu·ªôm, t·∫©y v√† t·∫°o ki·ªÉu',
    description: `T√≥c ƒë∆∞·ª£c t·∫°o ki·ªÉu v√† nhu·ªôm m√†u theo y√™u c·∫ßu.`,
    list: [
      'V·ªõi t√≥c xoƒÉn: s·ª≠ d·ª•ng thu·ªëc chuy√™n d·ª•ng gi·ªØ n·∫øp l√¢u d√†i, h·∫°n ch·∫ø du·ªói n·∫øp.',
      'V·ªõi t√≥c nhu·ªôm: thu·ªëc nhu·ªôm ch·∫•t l∆∞·ª£ng cao, m√†u l√™n chu·∫©n, b·ªÅn v√† √≠t phai.',
      'V·ªõi t√≥c t·∫©y: ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng thu·ªëc t·∫©y v√† ch·∫•t t√≥c sau t·∫©y kh√¥ng b·ªã ƒë·ª©t, chia √¥ v√† m√≥c ho·∫∑c xen k·∫Ω v√†o b·ªô t√≥c gi·∫£ theo m·∫´u light.'
    ]
  },
  {
    title: 'Ki·ªÉm tra & ƒë√≥ng g√≥i',
    description: `Tr∆∞·ªõc khi ƒë·∫øn tay kh√°ch h√†ng, s·∫£n ph·∫©m ƒë∆∞·ª£c ki·ªÉm tra k·ªπ l∆∞·ª°ng qua nhi·ªÅu c√¥ng ƒëo·∫°n: d·ªát t√≥c, nhu·ªôm t√≥c, t·∫°o ki·ªÉu, ki·ªÉm ƒë∆°n v√† ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng. 
Camera gi√°m s√°t t·ª´ng ƒë∆°n h√†ng ƒë·ªÉ ƒë·∫£m b·∫£o minh b·∫°ch. Cu·ªëi c√πng, s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√≥ng g√≥i ch·ªânh chu v√† giao t·∫≠n tay kh√°ch h√†ng v·ªõi ƒë·∫ßy ƒë·ªß qu√† t·∫∑ng v√† h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng.`
  }
]

// processOrderSteps.js
export const processOrderSteps = [
  {
    title: 'Li√™n h·ªá & t∆∞ v·∫•n m·∫´u t√≥c',
    description: 'G·ª≠i h√¨nh ·∫£nh/m√¥ t·∫£ ho·∫∑c nh·∫≠n t∆∞ v·∫•n t·ª´ chuy√™n vi√™n c·ªßa Mika.wig.'
  },
  {
    title: 'Ch·ªët m·∫´u & th√¥ng tin giao h√†ng',
    description: 'X√°c nh·∫≠n m√†u, ki·ªÉu d√°ng, ƒë·ªãa ch·ªâ. Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn trong n∆∞·ªõc, qu·ªëc t·∫ø t√≠nh ph√≠ r√µ r√†ng.'
  },
  {
    title: 'X√°c nh·∫≠n ƒë∆°n h√†ng & ƒë·∫∑t c·ªçc',
    description: 'ƒê·∫∑t c·ªçc m·ªôt ph·∫ßn gi√° tr·ªã ƒë·ªÉ ƒë·∫£m b·∫£o ti·∫øn ƒë·ªô s·∫£n xu·∫•t.'
  },
  {
    title: 'Theo d√µi ti·∫øn ƒë·ªô s·∫£n xu·∫•t',
    description: 'C·∫≠p nh·∫≠t t√¨nh tr·∫°ng s·∫£n ph·∫©m qua nh√¢n vi√™n, b·∫°n c√≥ th·ªÉ theo d√µi ti·∫øn ƒë·ªô s·∫£n xu·∫•t.'
  },
  {
    title: 'Giao h√†ng t·∫≠n n∆°i',
    description: 'Trong n∆∞·ªõc qua Giao H√†ng Ti·∫øt Ki·ªám ho·∫∑c giao nhanh; qu·ªëc t·∫ø qua ƒë∆°n v·ªã uy t√≠n, ƒë·∫£m b·∫£o an to√†n.'
  }
];


export default function Process() {
  const [openSteps, setOpenSteps] = useState({})
  const [openOrderSteps, setOpenOrderSteps] = useState({})

  function toggleStep(idx) {
    setOpenSteps(prev => ({ ...prev, [idx]: !prev[idx] }))
  }

  function toggleOrderStep(idx) {
    setOpenOrderSteps(prev => ({ ...prev, [idx]: !prev[idx] }))
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow max-w-6xl mx-auto px-6 py-12">
        <h1 className="text-3xl mb-8 font-bold">Quy tr√¨nh s·∫£n xu·∫•t t·∫°i Mika.wig</h1>
        <p className="mb-8 text-gray-700">
          T·∫°i Mika.wig, m·ªói b·ªô t√≥c gi·∫£ ƒë·ªÅu ƒë∆∞·ª£c l√†m th·ªß c√¥ng 100%, th·ªÉ hi·ªán s·ª± t·ªâ m·ªâ v√† t√¢m huy·∫øt c·ªßa ƒë·ªôi ng≈© ngh·ªá nh√¢n l√†nh ngh·ªÅ. 
          Ch√∫ng t√¥i kh√¥ng ch·ªâ t·∫°o ra m·ªôt s·∫£n ph·∫©m t√≥c gi·∫£, m√† c√≤n g·ª≠i g·∫Øm v√†o ƒë√≥ ch·∫•t l∆∞·ª£ng, s·ª± tho·∫£i m√°i v√† v·∫ª ƒë·∫πp t·ª± nhi√™n nh·∫•t cho ng∆∞·ªùi d√πng.
        </p>

        <div className="grid md:grid-cols-5 gap-6">
          {processSteps.map((step, i) => (
            <div key={i} className="p-6 border rounded-lg text-left flex flex-col">
              <button onClick={() => toggleStep(i)} className="text-left">
                <div className="text-xl font-playfair font-semibold mb-2">B∆∞·ªõc {i + 1}: {step.title}</div>
              </button>
              <div className={`${openSteps[i] ? 'block' : 'hidden'} text-gray-600 mb-2`}>{step.description}</div>
              {step.list && (
                <ul className={`${openSteps[i] ? 'block' : 'hidden'} list-disc list-inside text-gray-600 ml-2`}>
                  {step.list.map((item, idx) => (
                    <li key={idx}>{item}</li>
                  ))}
                </ul>
              )}
            </div>
          ))}
        </div>

        <h1 className="text-3xl mb-8 font-bold mt-4">üíå Quy tr√¨nh ƒë·∫∑t h√†ng t·∫°i Mika.wig ‚Äì T√≥c gi·∫£ Mai</h1>
        <p className="mb-8 text-gray-700">
          T·∫°i Mika.wig, ch√∫ng t√¥i hi·ªÉu r·∫±ng m·ªói kh√°ch h√†ng ƒë·ªÅu c√≥ gu th·∫©m m·ªπ v√† phong c√°ch ri√™ng bi·ªát. V√¨ v·∫≠y, to√†n b·ªô quy tr√¨nh ƒë·∫∑t h√†ng ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ b·∫°n c√≥ th·ªÉ t√πy ch·ªânh ho√†n to√†n m·∫´u t√≥c theo s·ªü th√≠ch, t·ª´ ki·ªÉu d√°ng, m√†u s·∫Øc ƒë·∫øn ch·∫•t li·ªáu.
        </p>

        <div className="grid md:grid-cols-5 gap-6">
          {processOrderSteps.map((step, i) => (
            <div key={i} className="p-6 border rounded-lg text-left flex flex-col">
              <button onClick={() => toggleOrderStep(i)} className="text-left">
                <div className="text-xl font-playfair font-semibold mb-2">B∆∞·ªõc {i + 1}: {step.title}</div>
              </button>
              <div className={`${openOrderSteps[i] ? 'block' : 'hidden'} text-gray-600 mb-2`}>{step.description}</div>
              {step.list && (
                <ul className={`${openOrderSteps[i] ? 'block' : 'hidden'} list-disc list-inside text-gray-600 ml-2`}>
                  {step.list.map((item, idx) => (
                    <li key={idx}>{item}</li>
                  ))}
                </ul>
              )}
            </div>
          ))}
        </div>
      </main>
      <Footer />
    </div>
  )
}
